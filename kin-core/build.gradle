buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jacoco:org.jacoco.core:${jacocoVersion}"
    }
}
apply plugin: 'com.android.library'
apply plugin: 'jacoco'

// maven plugin and group definition
// needed for jitpack support
apply plugin: 'maven'
group = 'com.github.kinecosystem'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation project(':android-stellar-sdk')
    implementation supportDependencies.supportAnnotations

    testImplementation testingDependencies.junit
    testImplementation testingDependencies.mockito
    testImplementation testingDependencies.mockWebServer
    testImplementation testingDependencies.robolectric
    testImplementation testingDependencies.gson

    androidTestImplementation testingDependencies.mockitoAndroid
    androidTestImplementation testingDependencies.androidTestRunner
    androidTestImplementation testingDependencies.androidTestRules
    androidTestImplementation testingDependencies.hamcrest
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
artifacts {
    archives sourcesJar
}

//jacoco unified code coverage
jacoco {
    toolVersion = jacocoVersion
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}