apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'

apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.kinecosystem'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner "kin.sdk.MultiDexAndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api(project(':kin-sdk')) {
        exclude group:'com.github.joshjdevl.libsodiumjni', module:'libsodium-jni'
    }
    implementation project(':kin-base')
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
    implementation 'com.github.joshjdevl.libsodiumjni:libsodium-jni-aar:2.0.1'
    implementation supportDependencies.supportAnnotations
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation testingDependencies.robolectric
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation testingDependencies.mockitoAndroid
    androidTestImplementation testingDependencies.androidTestRunner
    androidTestImplementation testingDependencies.androidTestRules
    androidTestImplementation testingDependencies.hamcrest
    androidTestImplementation testingDependencies.multidex
    androidTestImplementation testingDependencies.kotlin
    androidTestImplementation testingDependencies.kotlinJUnitTest
}

//bundle javadocs with published aar
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
artifacts {
    archives sourcesJar
}

//jacoco unified code coverage
jacoco {
    toolVersion = '0.8.1'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

//remove all non test related from kotlin source set, to make sure no kotlin files included in build
afterEvaluate {
    android.sourceSets.all { sourceSet ->
        if (!sourceSet.name.contains("test")) {
            sourceSet.kotlin.setSrcDirs([])
        }
    }
}
